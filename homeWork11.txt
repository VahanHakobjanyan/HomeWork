1. Encapsulation, Inheritance and Polymorphism.
2. Class defines custom data type. Its a blueprint for creating objects.
3. Encapsulation is a concept when certain parts of code are hidden so they can be accessed only by the parts of the code that need to have that access. Its implemented by using access modifiers and properties.
4. Gives access only where its needed and hides unnecessary detailes.
5. Inheritance allows to create child class that extends or modifies methods from parent class.
6. Both class and struct allow to create custom data types. Class is reference type, while struct is value type.
7. Reference types allways allocate memory on the heap and are stored there. Class is a reference type.
8. Constructors is called to create and instance of an object.
9. Default constructor dont have any parameters, its just initializes everything by their default values. Parameterized constructors can contain user defined logic.
10.This keyword is used to refer to the current instance.
11.This keyword allows to refer to the instance variable (this.name = name).
12.Anything marked with static keyword cannot be accessed from instance, only directly from the class.
13.Static methods belong to class, instance methods to objects.
14.Static constructor is called automaticly before isntance creation to initialize all static data.
15.Static classes cannot have isntance created and contain only static members. Can be used to create various helper methods.
16.Access modifiers are used to Encapsulation in order by controlling code access.
17.Public, Private, Protected, Internal.
18.Public - visible from everywhere, Private - visible only in the class or struct where was created. Protected - visible only in the class where it was created and in the derived class. Internal - Visible in the same assembly.
19.Properties are fields with getter or setter or both for accessing field.
20.Get accessor is for reading value, set for writing.
21.Auto-implemented properties are shorter way of defining properties.Are used instead of defining getter and setter methods.
22.Using only getter, readonly keyword, using init;
23.Using readonly ensures that propertie cannot be modified, while propertie with private setter can be modified by object methods. 